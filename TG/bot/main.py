import requests
import pandas as pd
import numpy as np
import matplotlib
matplotlib.use('Agg')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—ç–∫–µ–Ω–¥ –±–µ–∑ GUI
import matplotlib.pyplot as plt
import telebot
from io import BytesIO
# Telegram API —Ç–æ–∫–µ–Ω
API_TOKEN = '7647511729:AAG5-Iin2wNG16HLGBSBqU0gIxCSDz6iPTw'
bot = telebot.TeleBot(API_TOKEN)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
user_pairs = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã —Å Binance
def get_binance_price(symbol):
    url = f'https://api.binance.com/api/v3/ticker/price?symbol={symbol}'
    response = requests.get(url)
    if response.status_code != 200:
        raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å Binance –¥–ª—è –ø–∞—Ä—ã {symbol}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–º–≤–æ–ª.")
    data = response.json()
    return float(data['price'])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å Binance
def get_historical_data(symbol, interval='1d', limit=100):
    url = f'https://api.binance.com/api/v3/klines?symbol={symbol}&interval={interval}&limit={limit}'
    response = requests.get(url)
    if response.status_code != 200:
        raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞—Ä—ã {symbol}.")
    data = response.json()
    return [(float(item[1]), float(item[4])) for item in data]  # (Open, Close)

# –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Å–∫–æ–ª—å–∑—è—â—É—é —Å—Ä–µ–¥–Ω—é—é (SMA)
def moving_average(data, window=14):
    close_prices = [item[1] for item in data]
    df = pd.DataFrame(close_prices, columns=['Close'])
    df['SMA'] = df['Close'].rolling(window=window).mean()
    return df['SMA'].tolist()

# –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é —Å–∫–æ–ª—å–∑—è—â—É—é —Å—Ä–µ–¥–Ω—é—é (EMA)
def exponential_moving_average(data, window=14):
    close_prices = [item[1] for item in data]
    df = pd.DataFrame(close_prices, columns=['Close'])
    df['EMA'] = df['Close'].ewm(span=window, adjust=False).mean()
    return df['EMA'].tolist()

# –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º MACD
def macd(data):
    close_prices = [item[1] for item in data]
    df = pd.DataFrame(close_prices, columns=['Close'])
    short_ema = df['Close'].ewm(span=12, adjust=False).mean()
    long_ema = df['Close'].ewm(span=26, adjust=False).mean()
    df['MACD'] = short_ema - long_ema
    df['Signal Line'] = df['MACD'].ewm(span=9, adjust=False).mean()
    return df['MACD'].tolist(), df['Signal Line'].tolist()

# –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º Bollinger Bands
def bollinger_bands(data, window=20):
    close_prices = [item[1] for item in data]
    df = pd.DataFrame(close_prices, columns=['Close'])
    sma = df['Close'].rolling(window=window).mean()
    std = df['Close'].rolling(window=window).std()
    df['Upper Band'] = sma + (std * 2)
    df['Lower Band'] = sma - (std * 2)
    return df['Upper Band'].tolist(), df['Lower Band'].tolist()

# –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º RSI –≤—Ä—É—á–Ω—É—é
def rsi(data, period=14):
    close_prices = [item[1] for item in data]
    deltas = np.diff(close_prices)
    gains = np.where(deltas > 0, deltas, 0)
    losses = np.where(deltas < 0, -deltas, 0)

    avg_gain = np.mean(gains[:period])
    avg_loss = np.mean(losses[:period])

    rsi_values = []
    for i in range(period, len(close_prices)):
        avg_gain = (avg_gain * (period - 1) + gains[i - 1]) / period
        avg_loss = (avg_loss * (period - 1) + losses[i - 1]) / period

        rs = avg_gain / avg_loss if avg_loss != 0 else 0
        rsi = 100 - (100 / (1 + rs))
        rsi_values.append(rsi)

    return rsi_values

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
def generate_signals(data):
    close_prices = [item[1] for item in data]
    sma = moving_average(data)
    ema = exponential_moving_average(data)
    rsi_values = rsi(data)
    macd_values, signal_line = macd(data)
    upper_band, lower_band = bollinger_bands(data)

    last_price = close_prices[-1]
    last_sma = sma[-1]
    last_ema = ema[-1]
    last_rsi = rsi_values[-1]
    last_macd = macd_values[-1]
    last_signal_line = signal_line[-1]
    last_upper_band = upper_band[-1]
    last_lower_band = lower_band[-1]

    signals = []

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è SMA/EMA –∏ —Ü–µ–Ω—ã
    if last_price > last_sma and last_price > last_ema:
        signals.append("üíπ Buy: –¶–µ–Ω–∞ –≤—ã—à–µ SMA –∏ EMA")
    elif last_price < last_sma and last_price < last_ema:
        signals.append("üìâ Sell: –¶–µ–Ω–∞ –Ω–∏–∂–µ SMA –∏ EMA")

    # –°–∏–≥–Ω–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ RSI
    if last_rsi < 30:
        signals.append("RSI: –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å (–Ω–∏–∂–µ 30)")
    elif last_rsi > 70:
        signals.append("RSI: –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å (–≤—ã—à–µ 70)")

    # –°–∏–≥–Ω–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ MACD
    if last_macd > last_signal_line:
        signals.append("MACD: –ë—ã—á–∏–π —Å–∏–≥–Ω–∞–ª")
    elif last_macd < last_signal_line:
        signals.append("MACD: –ú–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª")

    # –°–∏–≥–Ω–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ Bollinger Bands
    if last_price > last_upper_band:
        signals.append("Bollinger Bands: –¶–µ–Ω–∞ –≤—ã—à–µ –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã (–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å)")
    elif last_price < last_lower_band:
        signals.append("Bollinger Bands: –¶–µ–Ω–∞ –Ω–∏–∂–µ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã (–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å)")

    return "\n".join(signals)

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã /setpair –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã, /price –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –∏ /signal –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")

# –ö–æ–º–∞–Ω–¥–∞ /setpair –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã
@bot.message_handler(commands=['setpair'])
def set_pair(message):
    msg = bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT):")
    bot.register_next_step_handler(msg, save_pair)

def save_pair(message):
    user_id = message.from_user.id
    pair = message.text.upper()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞—Ä–∞
        get_binance_price(pair)
        user_pairs[user_id] = pair
        bot.reply_to(message, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–∞—Ä—É: {pair}")
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: {str(e)}")

# –ö–æ–º–∞–Ω–¥–∞ /price –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞—Ä—ã
@bot.message_handler(commands=['price'])
def get_price(message):
    try:
        user_id = message.from_user.id
        symbol = user_pairs.get(user_id, 'BTCUSDT')  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é BTCUSDT, –µ—Å–ª–∏ –ø–∞—Ä–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞
        price = get_binance_price(symbol)
        bot.reply_to(message, f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {symbol}: ${price}")
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {str(e)}")

# –ö–æ–º–∞–Ω–¥–∞ /signal –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞—Ä—ã
@bot.message_handler(commands=['signal'])
def get_signal(message):
    try:
        user_id = message.from_user.id
        symbol = user_pairs.get(user_id, 'BTCUSDT')  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é BTCUSDT, –µ—Å–ª–∏ –ø–∞—Ä–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞
        data = get_historical_data(symbol)
        signal = generate_signals(data)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        close_prices = [item[1] for item in data]
        plt.style.use('fivethirtyeight')  # –ü—Ä–∏–º–µ—Ä –¥—Ä—É–≥–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Å—Ç–∏–ª—è
        plt.figure(figsize=(10, 6))
        plt.plot(close_prices, label='–¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è')
        plt.title(f'{symbol} –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è')
        plt.legend()
        plt.tight_layout()

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ –±—É—Ñ–µ—Ä
        buffer = BytesIO()
        plt.savefig(buffer, format='png')
        buffer.seek(0)
        plt.close()

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –∏ —Å–∏–≥–Ω–∞–ª–∞
        bot.send_photo(message.chat.id, buffer, caption=f"–¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è {symbol}:\n{signal}")
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞: {str(e)}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)